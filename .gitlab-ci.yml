variables:
  IMAGE_TAG_DEV: "develop"
  IMAGE_TAG_MAIN: "latest"
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE
  DOCKER_HUB_IMAGE: sunnev/openregex

stages:
  - build-develop
  - lint-test
  - auto-fix
  - test
  - get-version
  - build-deploy
  - push-to-docker-hub
  - deploy

# --- DEVELOPMENT STAGE ---
build-dev:
  stage: build-develop
  image: docker:24.0.5
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:24.0.5-dind
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - Dockerfile_dev
      - requirements.txt
  only:
    changes:
      - Dockerfile_dev
      - requirements.txt
      - requirements_dev.txt
  before_script:
    - echo "======Dev Docker Build======"
    - mv Dockerfile_dev Dockerfile
    - echo "======Login to GitLab Registry======"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "======Building Docker Image====="
    - docker build -t $DOCKER_IMAGE:$IMAGE_TAG_DEV .
    - docker push $DOCKER_IMAGE:$IMAGE_TAG_DEV
  tags:
    - docker
  except:
    - main
    - tags
  retry: 2

# --- LINTING AND FORMATTING STAGE ---
pylint-test:
  stage: lint-test
  image: $DOCKER_IMAGE:$IMAGE_TAG_DEV
  before_script:
    - echo "Installing Pylint..."
    - pip install pylint
  script:
    - find . -type f -name "*.py" \( ! -path "**/.venv/**" -a ! -path "**/tests/**" \) -exec pylint --fail-under=7 {} +
  tags:
    - docker
  rules:
    - if: '$CI_COMMIT_BRANCH != "main" && $CI_COMMIT_TAG == null && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")'
      changes:
        - "**/*.py"
        - "**/*.cpp"
        - "**/*.java"

flake8-test:
  stage: lint-test
  image: $DOCKER_IMAGE:$IMAGE_TAG_DEV
  before_script:
    - echo "Installing Flake8..."
    - pip install flake8
  script:
    - echo "Running Flake8..."
    - flake8 . --filename="*.py" --exclude=".venv,tests"
  allow_failure: true
  tags:
    - docker
  rules:
    - if: '$CI_COMMIT_BRANCH != "main" && $CI_COMMIT_TAG == null && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")'
      changes:
        - "**/*.py"
        - "**/*.cpp"
        - "**/*.java"

isort-test:
  stage: lint-test
  image: $DOCKER_IMAGE:$IMAGE_TAG_DEV
  before_script:
    - echo "Installing isort..."
    - pip install isort
  script:
    - echo "Running isort..."
    - isort --check-only --line-length 120 .
  tags:
    - docker
  rules:
    - if: '$CI_COMMIT_BRANCH != "main" && $CI_COMMIT_TAG == null && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")'
      changes:
        - "**/*.py"
        - "**/*.cpp"
        - "**/*.java"

black-test:
  stage: lint-test
  image: $DOCKER_IMAGE:$IMAGE_TAG_DEV
  before_script:
    - echo "Installing Black..."
    - pip install black
  script:
    - echo "Running Black..."
    - black --check --line-length 120 .
  tags:
    - docker
  rules:
    - if: '$CI_COMMIT_BRANCH != "main" && $CI_COMMIT_TAG == null && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")'
      changes:
        - "**/*.py"
        - "**/*.cpp"
        - "**/*.java"

# --- AUTO FIX STAGE ---
lint-fix:
  stage: auto-fix
  image: $DOCKER_IMAGE:$IMAGE_TAG_DEV
  needs:
    - black-test
    - isort-test
  when: on_failure
  before_script:
    - echo "Installing Black and isort..."
    - pip install black
    - pip install isort
    - echo "Configuring Git..."
    - git config --global user.email ""
    - git config --global user.name "CI Robot"
    - git remote set-url origin --push https://${GIT_CI_USER}:${GIT_CI_PASS}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git
  script:
    - echo "Applying Black formatting..."
    - black --line-length 120 .
    - git add .
    - git commit -m "Robot - Lint Black" || true
    - echo "Applying isort formatting..."
    - isort --line-length 120 .
    - git add .
    - git commit -m "Robot - Lint Isort" || true
    - git push origin HEAD:$CI_COMMIT_REF_NAME
  tags:
    - docker
  rules:
    - if: '$CI_COMMIT_BRANCH != "main" && $CI_COMMIT_TAG == null && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")'
      changes:
        - "**/*.py"
        - "**/*.cpp"
        - "**/*.java"

# --- TESTING STAGE ---
pytest:
  stage: test
  needs:
    - pylint-test
    - flake8-test
    - isort-test
    - black-test
  image: $DOCKER_IMAGE:$IMAGE_TAG_DEV
  script:
    - echo "Running Unit Tests..."
    - export PYTHONPATH=$PYTHONPATH:`pwd`
    - pytest --junitxml=report/report.xml
  artifacts:
    reports:
      junit: report/report.xml
  rules:
    - if: '$CI_COMMIT_BRANCH != "main" && $CI_COMMIT_TAG == null && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")'
      changes:
        - "**/*.py"
        - "**/*.cpp"
        - "**/*.java"
  tags:
    - docker

# --- MAIN BRANCH STAGES ---
build-main:
  stage: build-deploy
  image: docker:24.0.5
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:24.0.5-dind
  before_script:
    - echo "======Main Docker Build======"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - echo "======Building Docker Image====="
    - docker build -t "$DOCKER_IMAGE:$IMAGE_TAG_MAIN" .
    - docker push "$DOCKER_IMAGE:$IMAGE_TAG_MAIN"
  tags:
    - docker
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "test"

version:
  stage: build-deploy
  image: $DOCKER_IMAGE:$IMAGE_TAG_DEV

  script:
    - echo "======Extracting Version====="
    - VERSION=$(python project/environments.py)
    - echo "APP_VERSION=$VERSION" > version.env
  artifacts:
    reports:
      dotenv: version.env
  tags:
    - docker
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "test"

# --- DOCKER HUB PUSH STAGE ---
docker-hub:
  stage: push-to-docker-hub
  needs:
    - build-main
    - version
  image: docker:24.0.5
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:24.0.5-dind

  before_script:
    - echo "======Docker Hub Push (Version:$APP_VERSION)======"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker pull "$DOCKER_IMAGE:$IMAGE_TAG_MAIN"
    - docker login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD"
  script:
    - docker tag "$DOCKER_IMAGE:$IMAGE_TAG_MAIN" "$DOCKER_HUB_IMAGE:$IMAGE_TAG_MAIN"
    - docker tag "$DOCKER_IMAGE:$IMAGE_TAG_MAIN" "$DOCKER_HUB_IMAGE:$APP_VERSION"
    - echo "======Pushing Image to Docker Hub -> $DOCKER_HUB_IMAGE:$IMAGE_TAG_MAIN====="
    - docker push "$DOCKER_HUB_IMAGE:$IMAGE_TAG_MAIN"
    - echo "======Tagging Image for Docker Hub -> $DOCKER_HUB_IMAGE:$APP_VERSION====="
    - docker push "$DOCKER_HUB_IMAGE:$APP_VERSION"
  tags:
    - docker
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

# --- TAG VERSION STAGE ---
tag-version:
  stage: deploy
  needs:
    - docker-hub
  image: alpine/git
  variables:
    GIT_STRATEGY: clone
  before_script:
    - git config --global user.email ""
    - git config --global user.name "CI Robot"
  script:
    - git remote set-url origin https://${GIT_CI_USER}:${GIT_CI_PASS}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git
    - git tag -a $APP_VERSION -m "Version $APP_VERSION"
    - git push origin $APP_VERSION
  tags:
    - docker
  rules:
    - if: $CI_COMMIT_BRANCH == "main"


# --- DEPLOY STAGE ---
deploy:
  stage: deploy
  needs:
    - build-main
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    APP_CONTAINER_NAME: "OpenRegex_$CI_COMMIT_REF_SLUG"
  script:
    - echo "======Starting Deployment======"
    - echo "Deploying to container:$APP_CONTAINER_NAME"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker pull "$DOCKER_IMAGE:$IMAGE_TAG_MAIN"
    - |
      if [[ "$CI_COMMIT_REF_SLUG" == "main" ]]; then
        PORT="5000"
        LOG_LEVEL="ERROR"
      elif [[ "$CI_COMMIT_REF_SLUG" == "test" ]]; then
        PORT="5001"
        LOG_LEVEL="DEBUG"
      else
        echo "Error: Branch $CI_COMMIT_REF_SLUG not supported for deployment."
        exit 1
      fi
    - echo "Using external port:$PORT"
    - docker stop "$APP_CONTAINER_NAME" || true
    - docker rm "$APP_CONTAINER_NAME" || true
    - |
      # Start the container
      docker run -d --name "$APP_CONTAINER_NAME" \
      -e OPENREGEX_LOG_LEVEL=$LOG_LEVEL \
      -e OPENREGEX_TIMEOUT_S=6 \
      -p "$PORT:5000" \
      "$DOCKER_IMAGE:$IMAGE_TAG_MAIN"
  after_script:
    - echo "Cleaning up..."
    - docker image prune -f
  tags:
    - openregex
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "test"